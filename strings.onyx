package strings

use core {println, tprintf}
use core.intrinsics.types {type_is_struct}
use core.slice
use core.conv
use core.string
use core.set


isDigit :: (c: u8) -> bool {
    return c >= '0' && c <= '9';
}

isDigitM :: [c] (
    c >= '0' && c <= '9'
)

// Returns true if the character is not a letter or digit
isSymbol :: (c: u8) -> bool {
    return slice.find("#$%&*+-/=@", c) >= 0;
}

last_index_of :: (s: str, substr: str) -> i32 {
    while i := s.count - 1; i >= 0 {
        defer i -= 1;
        while j := 0; j < substr.count {
            if s[i + j] != substr[j] {
                continue continue;
            }

            j += 1;
        }

        return i;
    }

    return -1;
}

find_last :: #match #local {}

#overload
find_last :: (arr: [] $T, value: T) -> i32 {
    for i: range.{arr.count - 1, 0, -1} {
        if value == arr.data[i] do return i;
    }

    return -1;
}

#overload
find_last :: macro (arr: [] $T/type_is_struct, pred: Code) -> i32 {
    for i: range.{arr.count - 1, 0, -1} {
        it := &arr[i];
        if #unquote pred(it) do return i;
    }

    return -1;
}

#overload
find_last :: macro (arr: [] $T, pred: Code) -> i32 {
    for i: range.{arr.count - 1, 0, -1} {
        it := arr[i];
        if #unquote pred(it) do return i;
    }

    return -1;
}

toStr :: (va: ..any) -> str {
    // This function is intended to format single variables so we only need a small buffer
    buffer: [128] u8;
    out := conv.format_va(buffer, "{}", va);
    return string.alloc_copy(out, allocator=context.temp_allocator);
}

set_to_str :: (s: &Set($T)) -> str {
    buffer := "[";
    for item: set.as_iter(s) {
        if #first {
            buffer = tprintf("{}{}", buffer, *item);
        } else {
            buffer = tprintf("{}, {}", buffer, *item);
        }
    }
    buffer = tprintf("{}]", buffer);
    return buffer;
}


trim :: (s: str) -> str {
    start := slice.find(s, [c] (c != ' ' && c != '\n'));
    end := find_last(s, [c] (c != ' ' && c != '\n'));

    return s[start .. (end + 1)];
}